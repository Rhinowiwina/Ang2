"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var core_1 = require("@angular/core");
var common_1 = require("@angular/common");
var testing_1 = require("@angular/core/testing");
var router_1 = require("@angular/router");
var testing_2 = require("@angular/router/testing");
var ng2_bs3_modal_1 = require("./ng2-bs3-modal");
var common_2 = require("../test/common");
describe('ModalComponent', function () {
    beforeEach(function () {
        jasmine.addMatchers(window['jasmine-jquery-matchers']);
    });
    beforeEach(function () {
        testing_1.TestBed.configureTestingModule({
            imports: [
                TestModule,
                testing_2.RouterTestingModule.withRoutes([
                    { path: '', component: TestComponent },
                    { path: 'test2', component: TestComponent2 }
                ])
            ]
        });
    });
    afterEach(testing_1.fakeAsync(function () {
        testing_1.TestBed.resetTestingModule();
        common_2.ticks(300, 150); // backdrop, modal transitions
    }));
    it('should instantiate component', function () {
        var fixture = testing_1.TestBed.createComponent(TestComponent);
        expect(fixture.componentInstance instanceof TestComponent).toBe(true, 'should create AppComponent');
    });
    it('should render', function () {
        var fixture = common_2.createRoot(TestComponent);
        expect(document.querySelectorAll('.modal').length).toBe(1);
    });
    it('should cleanup when destroyed', testing_1.fakeAsync(function () {
        var modal = common_2.createRoot(TestComponent).componentInstance.modal;
        modal.ngOnDestroy();
        testing_1.tick();
        expect(document.querySelectorAll('.modal').length).toBe(0);
    }));
    it('should emit onClose when modal is closed and animation is enabled', testing_1.fakeAsync(function () {
        var fixture = common_2.createRoot(TestComponent);
        var modal = fixture.componentInstance.modal;
        var spy = jasmine.createSpy('');
        fixture.componentInstance.animate = true;
        fixture.detectChanges();
        modal.onClose.subscribe(spy);
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        modal.close();
        common_2.ticks(300, 150); // backdrop, modal transitions
        expect(spy).toHaveBeenCalled();
    }));
    it('should emit onClose when modal is closed and animation is disabled', testing_1.fakeAsync(function () {
        var modal = common_2.createRoot(TestComponent).componentInstance.modal;
        var spy = jasmine.createSpy('');
        modal.onClose.subscribe(spy);
        modal.close();
        testing_1.tick();
        expect(spy).toHaveBeenCalled();
    }));
    it('should emit value passed to close when onClose emits', testing_1.fakeAsync(function () {
        var modal = common_2.createRoot(TestComponent).componentInstance.modal;
        var spy = jasmine.createSpy('').and.callFake(function (x) { return x; });
        var value = 'hello';
        modal.onClose.subscribe(spy);
        modal.close(value);
        testing_1.tick();
        expect(spy.calls.first().returnValue).toBe(value);
    }));
    it('should emit onDismiss when modal is dimissed and animation is disabled', testing_1.fakeAsync(function () {
        var modal = common_2.createRoot(TestComponent).componentInstance.modal;
        var spy = jasmine.createSpy('');
        modal.onDismiss.subscribe(spy);
        modal.open();
        modal.dismiss();
        testing_1.tick();
        expect(spy).toHaveBeenCalled();
    }));
    it('should emit onDismiss when modal is dismissed and animation is enabled', testing_1.fakeAsync(function () {
        var fixture = common_2.createRoot(TestComponent);
        var modal = fixture.componentInstance.modal;
        var spy = jasmine.createSpy('');
        fixture.componentInstance.animate = true;
        fixture.detectChanges();
        modal.onDismiss.subscribe(spy);
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        modal.dismiss();
        common_2.ticks(300, 150); // backdrop, modal transitions
        expect(spy).toHaveBeenCalled();
    }));
    it('should emit onDismiss only once', testing_1.fakeAsync(function () {
        var fixture = common_2.createRoot(TestComponent);
        var modal = fixture.componentInstance.modal;
        var spy = jasmine.createSpy('').and.callFake(function () { });
        fixture.componentInstance.animate = true;
        fixture.detectChanges();
        modal.onDismiss.subscribe(spy);
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        modal.dismiss();
        common_2.ticks(300, 150); // backdrop, modal transitions
        expect(spy).toHaveBeenCalledTimes(1);
    }));
    it('should emit onDismiss only once when showDefaultButtons is false', testing_1.fakeAsync(function () {
        var fixture = common_2.createRoot(TestComponent);
        var modal = fixture.componentInstance.modal;
        var spy = jasmine.createSpy('').and.callFake(function () { });
        fixture.componentInstance.animate = true;
        fixture.componentInstance.defaultButtons = false;
        fixture.detectChanges();
        modal.onDismiss.subscribe(spy);
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        modal.dismiss();
        common_2.ticks(300, 150); // backdrop, modal transitions
        expect(spy).toHaveBeenCalledTimes(1);
    }));
    it('should emit onDismiss when modal is closed, opened, then dimissed from backdrop', testing_1.fakeAsync(function () {
        var fixture = common_2.createRoot(TestComponent);
        var modal = fixture.componentInstance.modal;
        var spy = jasmine.createSpy('');
        fixture.componentInstance.animate = true;
        fixture.detectChanges();
        modal.onDismiss.subscribe(spy);
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        modal.close();
        common_2.ticks(300, 150); // backdrop, modal transitions
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        document.querySelector('.modal').click();
        common_2.ticks(300, 150); // backdrop, modal transitions
        expect(spy).toHaveBeenCalled();
    }));
    it('should emit onDismiss when modal is dismissed a second time from backdrop', testing_1.fakeAsync(function () {
        var fixture = common_2.createRoot(TestComponent);
        var modal = fixture.componentInstance.modal;
        var spy = jasmine.createSpy('');
        fixture.componentInstance.animate = true;
        fixture.detectChanges();
        modal.onDismiss.subscribe(spy);
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        modal.dismiss();
        common_2.ticks(300, 150); // backdrop, modal transitions
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        document.querySelector('.modal').click();
        common_2.ticks(300, 150); // backdrop, modal transitions
        expect(spy).toHaveBeenCalledTimes(2);
    }));
    it('should emit onDismiss when modal is dismissed a second time from backdrop and showDefaultButtons is false', testing_1.fakeAsync(function () {
        var fixture = common_2.createRoot(TestComponent);
        var modal = fixture.componentInstance.modal;
        var spy = jasmine.createSpy('');
        fixture.componentInstance.animate = true;
        fixture.componentInstance.defaultButtons = false;
        fixture.detectChanges();
        modal.onDismiss.subscribe(spy);
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        modal.dismiss();
        common_2.ticks(300, 150); // backdrop, modal transitions
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        document.querySelector('.modal').click();
        common_2.ticks(300, 150); // backdrop, modal transitions
        expect(spy).toHaveBeenCalledTimes(2);
    }));
    it('should emit onOpen when modal is opened and animations have been enabled', testing_1.fakeAsync(function () {
        var fixture = common_2.createRoot(TestComponent);
        var modal = fixture.componentInstance.modal;
        var spy = jasmine.createSpy('');
        fixture.componentInstance.animate = true;
        fixture.detectChanges();
        modal.onOpen.subscribe(spy);
        modal.open();
        common_2.ticks(150, 300); // backdrop, modal transitions
        expect(spy).toHaveBeenCalled();
    }));
    describe('Routing', function () {
        it('should not throw an error when navigating on modal close', testing_1.fakeAsync(testing_1.inject([router_1.Router], function (router) {
            // let zone = window['Zone']['ProxyZoneSpec'].assertPresent().getDelegate();
            var fixture = common_2.createRoot(RootComponent, router);
            var modal = fixture.componentInstance.glue.testComponent.modal;
            modal.onClose.subscribe(function () {
                router.navigateByUrl('/test2');
                common_2.advance(fixture);
                var content = fixture.debugElement.nativeElement.querySelector('test-component2');
                expect(content).toHaveText('hello');
            });
            modal.open();
            common_2.advance(fixture, 150); // backdrop transition
            common_2.advance(fixture, 300); // modal transition
            modal.close();
            common_2.advance(fixture, 300); // modal transition
            common_2.advance(fixture, 150); // backdrop transition
        })));
    });
});
var GlueService = (function () {
    function GlueService() {
    }
    return GlueService;
}());
var TestComponent = (function () {
    function TestComponent(glue) {
        this.animate = false;
        this.defaultButtons = true;
        glue.testComponent = this;
    }
    return TestComponent;
}());
__decorate([
    core_1.ViewChild(ng2_bs3_modal_1.ModalComponent),
    __metadata("design:type", ng2_bs3_modal_1.ModalComponent)
], TestComponent.prototype, "modal", void 0);
TestComponent = __decorate([
    core_1.Component({
        selector: 'test-component',
        template: "\n        <button type=\"button\" class=\"btn btn-default\" (click)=\"modal.open()\" (onClose)=\"onClose()\">Open me!</button>\n\n        <modal #modal [animation]=\"animate\">\n            <modal-header [show-close]=\"true\">\n                <h4 class=\"modal-title\">I'm a modal!</h4>\n            </modal-header>\n            <modal-body>\n                Hello World!\n            </modal-body>\n            <modal-footer [show-default-buttons]=\"defaultButtons\"></modal-footer>\n        </modal>\n    "
    }),
    __param(0, core_1.Inject(GlueService)),
    __metadata("design:paramtypes", [GlueService])
], TestComponent);
var TestComponent2 = (function () {
    function TestComponent2() {
        this.message = 'hello';
    }
    return TestComponent2;
}());
TestComponent2 = __decorate([
    core_1.Component({
        selector: 'test-component2',
        template: "{{message}}",
    })
], TestComponent2);
var RootComponent = (function () {
    function RootComponent(glue) {
        this.glue = glue;
    }
    return RootComponent;
}());
RootComponent = __decorate([
    core_1.Component({
        selector: 'app-component',
        template: "\n        <router-outlet></router-outlet>\n    "
    }),
    __param(0, core_1.Inject(GlueService)),
    __metadata("design:paramtypes", [GlueService])
], RootComponent);
var TestModule = (function () {
    function TestModule() {
    }
    return TestModule;
}());
TestModule = __decorate([
    core_1.NgModule({
        imports: [testing_2.RouterTestingModule, ng2_bs3_modal_1.Ng2Bs3ModalModule, common_1.CommonModule],
        providers: [GlueService],
        declarations: [TestComponent, TestComponent2, RootComponent],
        exports: [TestComponent, TestComponent2, RootComponent]
    })
], TestModule);
//# sourceMappingURL=ng2-bs3-modal.spec.js.map